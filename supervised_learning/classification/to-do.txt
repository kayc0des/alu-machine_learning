Write a class Neuron that defines a single neuron performing binary classification (Based on 2-neuron.py):

Add the public method def cost(self, Y, A):
Calculates the cost of the model using logistic regression
Y is a numpy.ndarray with shape (1, m) that contains the correct labels for the input data
A is a numpy.ndarray with shape (1, m) containing the activated output of the neuron for each example
To avoid division by zero errors, please use 1.0000001 - A instead of 1 - A
Returns the cost

alexa@ubuntu-xenial:$ cat 3-main.py
#!/usr/bin/env python3

import numpy as np

Neuron = __import__('3-neuron').Neuron

lib_train = np.load('../data/Binary_Train.npz')
X_3D, Y = lib_train['X'], lib_train['Y']
X = X_3D.reshape((X_3D.shape[0], -1)).T

np.random.seed(0)
neuron = Neuron(X.shape[0])
A = neuron.forward_prop(X)
cost = neuron.cost(Y, A)
print(cost)
alexa@ubuntu-xenial:$ ./3-main.py
4.365104944262272
alexa@ubuntu-xenial:$